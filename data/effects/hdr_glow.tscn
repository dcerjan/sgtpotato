[gd_scene load_steps=3 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float hdr_threshold = 0.3;
uniform float color_threshold = 0.5;

vec4 sample_glow_pixel(sampler2D tex, vec2 uv) {
  return max(textureLod(tex, uv, 2.0) - hdr_threshold, vec4(0.0));
}

vec4 sample_glow_pixel_wide(sampler2D tex, vec2 uv) {
  return max(textureLod(tex, uv, 3.0) - hdr_threshold, vec4(0.0));
}

void fragment() {
  vec2 ps = SCREEN_PIXEL_SIZE;
  // Get blurred color from pixels considered glowing
  vec4 col = texture(SCREEN_TEXTURE, SCREEN_UV);
  vec4 glow = vec4(0);
  if (length(col.xyz) > color_threshold) {
    vec4 col0 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(-ps.x, 0.0)) +
                sample_glow_pixel_wide(SCREEN_TEXTURE, SCREEN_UV + vec2(-ps.x * 2.0, 0.0));
    vec4 col1 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(ps.x, 0.0)) +
                sample_glow_pixel_wide(SCREEN_TEXTURE, SCREEN_UV + vec2(ps.x * 2.0, 0.0));
    vec4 col2 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, -ps.y)) +
                sample_glow_pixel_wide(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, -ps.y * 2.0));
    vec4 col3 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, ps.y)) +
                sample_glow_pixel_wide(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, ps.y * 2.0));
    glow = 0.25 * (col0 + col1 + col2 + col3)
  }
  
  COLOR = vec4(col.rgb + glow.rgb, col.a);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/hdr_threshold = 0.3
shader_param/color_threshold = 0.515

[node name="HDR Glow" type="ColorRect"]
material = SubResource( 2 )
margin_left = -80.0
margin_top = -45.0
margin_right = 80.0
margin_bottom = 45.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}
